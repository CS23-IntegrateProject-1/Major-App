generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Films {
  filmId      Int         @id @default(autoincrement())
  name        String      @db.VarChar(50)
  genre       Films_genre
  synopsis    String      @db.Text
  releaseDate DateTime    @db.Date
  duration    Int
  posterImg   String      @db.VarChar(100)
  rate        Int
  Shows       Shows[]
}

model Payments {
  paymentId        Int                    @id @default(autoincrement())
  reservationId    Int
  paymentDate      DateTime               @db.DateTime(0)
  paymentAmount    Decimal                @db.Decimal(5, 2)
  paymentMethod    Payments_paymentMethod
  paymentStatus    Payments_paymentStatus
  Reservation_Logs Reservation_Logs       @relation(fields: [reservationId], references: [reservationId], onUpdate: Restrict, map: "Payments_ibfk_1")

  @@index([reservationId], map: "reservationId")
}

model Reservation_Logs {
  reservationId Int        @id @default(autoincrement())
  showId        Int
  seatId        Int
  Payments      Payments[]
  Shows         Shows      @relation(fields: [showId], references: [showId], onUpdate: Restrict, map: "Reservation_Logs_ibfk_1")
  Seats         Seats      @relation(fields: [seatId], references: [seatId], onUpdate: Restrict, map: "Reservation_Logs_ibfk_2")

  @@index([seatId], map: "seatId")
  @@index([showId], map: "showId")
}

model Screens {
  screenId   Int                @id @default(autoincrement())
  theaterId  Int
  capacity   Int
  screenType Screens_screenType
  Theaters   Theaters           @relation(fields: [theaterId], references: [theaterId], onUpdate: Restrict, map: "Screens_ibfk_1")
  Seats      Seats[]
  Shows      Shows[]

  @@index([theaterId], map: "theaterId")
}

model Seat_Types {
  seatTypeId     Int     @id @default(autoincrement())
  typeName       String  @db.VarChar(50)
  description    String? @db.Text
  price_modifier Decimal @db.Decimal(5, 2)
  Seats          Seats[]
}

model Seats {
  seatId           Int                @id @default(autoincrement())
  screenId         Int
  seatTypeId       Int
  seatRow          Int
  seatNo           Int
  Reservation_Logs Reservation_Logs[]
  Screens          Screens            @relation(fields: [screenId], references: [screenId], onUpdate: Restrict, map: "Seats_Screens_screenId_fk")
  Seat_Types       Seat_Types         @relation(fields: [seatTypeId], references: [seatTypeId], onUpdate: Restrict, map: "Seats_Seat_Types_seatTypeId_fk")

  @@index([screenId], map: "Seats_Screens_screenId_fk")
  @@index([seatTypeId], map: "Seats_Seat_Types_seatTypeId_fk")
}

model Shows {
  showId           Int                @id @default(autoincrement())
  screenId         Int
  filmId           Int
  date             DateTime           @db.Date
  startTime        DateTime           @db.Timestamp(0)
  endTime          DateTime           @db.Timestamp(0)
  price            Decimal            @db.Decimal(10, 2)
  Reservation_Logs Reservation_Logs[]
  Films            Films              @relation(fields: [filmId], references: [filmId], onUpdate: Restrict, map: "Shows_Films_filmId_fk")
  Screens          Screens            @relation(fields: [screenId], references: [screenId], onUpdate: Restrict, map: "Shows_Screens_screenId_fk")

  @@index([filmId], map: "Shows_Films_filmId_fk")
  @@index([screenId], map: "Shows_Screens_screenId_fk")
}

model Theaters {
  theaterId    Int       @id @default(autoincrement())
  name         String    @db.VarChar(100)
  address      String    @db.VarChar(255)
  phoneNum     String    @db.VarChar(15)
  promptPayNum String    @db.VarChar(15)
  latitude     Decimal   @db.Decimal(20, 15)
  longitude    Decimal   @db.Decimal(20, 15)
  Screens      Screens[]
}

enum Films_genre {
  Action
  Adventure
  Animation
  Comedy
  Crime
  Drama
  Fantasy
  Horror
  Mystery
  Romance
  SciFi
  Thriller
  War
  Western
  Documentary
  Musical
  Historical
  Superhero
  Family
}

enum Screens_screenType {
  IMAX
  X3D
  X4D
  Standard
  Kids
}

enum Payments_paymentMethod {
  cash
  promptPay
}

enum Payments_paymentStatus {
  pending
  success
  canceled
}
